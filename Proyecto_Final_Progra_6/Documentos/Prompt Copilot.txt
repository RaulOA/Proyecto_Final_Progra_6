# Estándares de desarrollo para Libreria Universidad (.NET 9 + Angular)

## 1. Encabezado obligatorio para cada archivo

Todos los archivos deben incluir el siguiente encabezado al inicio. 
El campo "Archivo" debe reflejar el nombre real del archivo.
La "Ruta" debe indicar la ubicación relativa dentro del proyecto.
El "Proyecto" debe reflejar el nombre de la carpeta principal donde reside el archivo.
Se debe actualizar el campo "Historial de cambios" con fecha y descripción cada vez que se realice una modificación significativa.
Se debe actualizar el campo "Descripción o propósito del archivo" para reflejar el propósito actual del archivo si se realizaron cambios que afectaron su funcionalidad.
Se debe analizar el código en busca de alertas críticas y documentarlas en el campo correspondiente.

================== MODELO DE ENCABEZADO ==================
Autor: Raul Ortega Acuña
Archivo: Program.cs
Solución: Claudes 2.0
Proyecto: Claudes_2._0.Server
Ruta: Claudes 2.0\Claudes_2._0.Server\Program.cs

Descripción o propósito del archivo:
Configuración y arranque de la aplicación ASP.NET Core. Incluye la configuración de 
servicios, autenticación, autorización, OpenIddict, Swagger, CORS, AutoMapper y 
pipeline de peticiones HTTP. Realiza el registro de clientes OIDC y el seeding de la 
base de datos al iniciar.

Historial de cambios:
1. 23/07/2025 - Estructura inicial y configuración de servicios principales.
2. 02/07/2025 - Actualización de referencias a OIDC: uso de LibreriaUniversidadSpaClientID en lugar de QuickAppClientID.
               - Mejoras en comentarios y consistencia.

Alertas Críticas:
- 24/07/2025 - GitHub Copilot sugirió el uso de una instancia pública para el endpoint OIDC. Se recomienda revisar 
              y configurar acceso seguro mediante restricciones de origen.
- 24/07/2025 - Observación: el manejo de excepciones en AuthController carece de logging detallado. Puede 
              dificultar auditorías ante fallos de autenticación.
===========================================================

## 2. Reglas de formato
- Si es relevante incluir un pequeño comentario descriptivo de la funcion de alguna linea o seccion de código, debe hacerse en español y al lado del código o en una línea arriba de la sección comentada según convenga.
- Utiliza las convenciones de nomenclatura de C# y el resto de tecnologías del stack para documentacion XML segun sea el origen del archivo.
- No eliminar las secciones comentadas como "Notas Importantes" o cometarios del código, ya que contienen información relevante para el mantenimiento, configuracion, uso, desarrollo o descripcion.

-En el o los archivos analizados se deben remplazar todas las referencias a ebenmonney, emonney, quickapp, Quick Application, Copyright, template, o cualquier otro termino relacionado o que con la plantilla original o proyecto QuickApp por Libreria Universidad, o mi nombre como programador (Raul O.A según corresponda siempre y cuando no tengan dependencias o referencias asociadas que se vallan a romper.
-Si existe texto en ingles debe ser traducido al español, a menos que sea un nombre de variable o propiedad que no deba ser traducido.
- Los metadatos deben ser congruentes con el contenido del archivo y actualizados según corresponda.
- Repositorio del proyecto: https://github.com/RaulOA/Libreria-Universidad 
- si existen url en comentarios o documentación, deben ser actualizadas a la url del repositorio del proyecto o a la url de la documentación oficial de .NET 9, Angular 17, OpenIddict, etc. según corresponda.

- Divide el código en grandes secciones, cada una debe contener encabezado y pie explicativo usando el siguiente formato:
======================================================== INICIO - NOMBRE DE LA SECCIÓN =========================================================
// Descripción breve del propósito de esta sección.
**********************************************************************************************************************************************
// Código relacionado con la sección.
======================================================== FIN - NOMBRE DE LA SECCIÓN ============================================================

## 3. Mensajes de confirmación (commits)
Los mensajes de confirmación deben seguir esta estructura:

Línea 1: resumen breve del cambio realizado en todo el proyecto, con máximo 72 caracteres  
Línea 2: en blanco  
Línea 3 en adelante: Archivo.extension: descripción completa del cambio con los detalles necesarios

Ejemplo:
Actualizado nombre de cliente OIDC a LibreriaUniversidadSpaClientID

Se modificó Program.cs para usar LibreriaUniversidadSpaClientID en lugar de QuickAppClientID.  
Se mejoraron comentarios y consistencia en los nombres del proyecto.

Además, si el commit cierra una incidencia, usar la sintaxis:
- `#123 closes` (esto cerrará automáticamente la incidencia número 123 al hacer merge)

Ejemplo:
Corregido error de autenticación #123 closes

El commit soluciona el manejo incorrecto de tokens en el controlador AuthController.  
Se añadió validación adicional y se actualizaron mensajes de error.

## 4. Migraciones de base de datos
Las migraciones deben seguir estas pautas:
- Cada migración debe tener un nombre descriptivo que refleje el cambio realizado.
- Las migraciones deben ser generadas automáticamente usando `dotnet ef migrations add NombreMigracion` utilizando la terminal desde el proyecto Libreria_Universidad.Server.
- No se deben modificar manualmente las migraciones generadas.
- Las migraciones deben ser aplicadas al entorno de desarrollo local antes de hacer push al repositorio.
- Finalmente, ejecutar `dotnet ef database update` para aplicar los cambios en la base de datos.